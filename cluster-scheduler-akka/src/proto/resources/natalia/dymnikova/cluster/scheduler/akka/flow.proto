// Copyright (c) 2016 Natalia Dymnikova
// Available via the MIT license
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
// documentation files (the "Software"), to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.

syntax = "proto3";
package natalia.dymnikova.cluster.scheduler.akka;

enum MemberCheckResultVerdict {
              Ok                                     = 0;
              NotConcluded                           = 1;
              Veto                                   = 2;
}

message MemberCheckResult {
             MemberCheckResultVerdict verdict        = 1;
             string                   message        = 2;
             string                   type           = 3;
}


message SetFlow {
             string                   flowName       = 1;
             Stage                    stage          = 2;
             string                   parentFlowName = 3;
}

enum StageType {
             NotSet                                  = 0;
             Supplier                                = 1;
             Operator                                = 2;
             Local                                   = 3;
             Merge                                   = 4;
}

message Stage {
             bytes                    operator       = 1;
             string                   address        = 2;
             StageType                type           = 3;
    repeated Stage                    stages         = 4;
             uint32                   id             = 5;
}

message CheckFlow {
             bytes                    operator       = 1;
}

message State {
    message Error {
            string                    message        = 1;
    }

    message Ok {
    }
}

message Completed {}

message IsReady {}

message OnStart {
             uint64                   count          = 1;
}

message Data {
             bytes                    data           = 1;
}

message More {
             uint64                   count          = 1;
}


message MemberState {

    message GetMemberState {
    }

    message State {
        string                        name           = 1;
        uint64                        value          = 2;
    }

    message MembersStates {
        repeated State                state          = 1;
    }
}